
ç-ß-var $ = document.querySelector.bind(document);
var $$ = document.querySelectorAll.bind(document);

if(!window.dconnect) window.dconnect = {};
if(!dconnect.init) dconnect.init = {};
dconnect.init.utils = (function () {
  console.log(this);
  httpRequest = function httpRequest(method, url, done) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.onload = function () {
      done(null, xhr.response);
    };
    xhr.onerror = function () {
      done(xhr.response);
    };
    xhr.send();
  }

  this.makeAjaxCall = function makeAjaxCall(url, methodType){
     var promiseObj = new Promise(function(resolve, reject){
        var xhr = new XMLHttpRequest();
        xhr.open(methodType, url, true);
        xhr.send();
        xhr.onreadystatechange = function(){
        if (xhr.readyState === 4){
           if (xhr.status === 200){
              //console.log("xhr done successfully");
              var resp = xhr.responseText;
              try {
                var respJson = JSON.parse(resp);
              } catch(e) {
              }
              resolve(respJson);
           } else {
              reject(xhr.status);
              //console.log("xhr failed");
           }
        } else {
           //console.log("xhr processing going on");
        }
     }
     //console.log("request sent succesfully");
   });
   return promiseObj;
  }

  this.getParameterByName = function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  }

  function insertHTML(file, elmnt) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4) {
        if (this.status == 200) {
          elmnt.innerHTML = this.responseText;
          runScripts(elmnt);
        }
        if (this.status == 404) {elmnt.innerHTML = "Page not found.";}
        /* Remove the attribute, and call this function once more: */
        elmnt.removeAttribute("w3-include-html");
      }
    }
    xhttp.open("GET", file, true);
    xhttp.send();
  }

  this.includeHTMLTags = function includeHTMLTags() {
    var z, i, elmnt, file;
    /* Loop through a collection of all HTML elements: */
    z = document.getElementsByTagName("*");
    for (i = 0; i < z.length; i++) {
      elmnt = z[i];
      file = null;
      /*search for elements with a certain atrribute:*/
      file = elmnt.getAttribute("w3-include-html");
      if (file) {
        /* Make an HTTP request using the attribute value as the file name: */
        insertHTML(file, elmnt);
        elmnt.removeAttribute("w3-include-html");
        setTimeout(()=>{includeHTMLTags();}, 0);
        /* Exit the function: */
        return;
      }
      file = elmnt.getAttribute("w3-load-html");
      const target = elmnt.getAttribute("target");

      console.log(file);
      if (file) {
        /* Make an HTTP request using the attribute value as the file name: */
        elmnt.onclick = ()=>{insertHTML(file, $(target)); return false;}
        elmnt.removeAttribute("w3-load-html");
        setTimeout(()=>{includeHTMLTags();}, 0);
        /* Exit the function: */
        return;
      }
    }
  }

  this.insertScript = function insertScript ($script, callback) {
    var s = document.createElement('script')
    s.type = 'text/javascript'
    if ($script.src) {
      s.onload = callback
      s.onerror = callback
      s.src = $script.src
    } else {
      s.textContent = $script.innerText
    }

    // re-insert the script tag so it executes.
    document.head.appendChild(s)

    // clean-up
    $script.parentNode.removeChild($script)

    // run the callback immediately for inline scripts
    if (!$script.src) {
      callback()
    }
  }

  // https://html.spec.whatwg.org/multipage/scripting.html
  var runScriptTypes = [
    'application/javascript',
    'application/ecmascript',
    'application/x-ecmascript',
    'application/x-javascript',
    'text/ecmascript',
    'text/javascript',
    'text/javascript1.0',
    'text/javascript1.1',
    'text/javascript1.2',
    'text/javascript1.3',
    'text/javascript1.4',
    'text/javascript1.5',
    'text/jscript',
    'text/livescript',
    'text/x-ecmascript',
    'text/x-javascript'
  ]
  // runs an array of async functions in sequential order
  this.seq = function seq (arr, callback=()=>{}, index) {
    // first call, without an index
    if (typeof index === 'undefined') {
      index = 0
    }
    if(!arr[index]) return;
    arr[index](function () {
      index++
      if (index === arr.length) {
        callback()
      } else {
        seq(arr, callback, index)
      }
    })
  }

  this.runScripts = function runScripts ($container) {
    // get scripts tags from a node
    var $scripts = $container.querySelectorAll('script')
    var runList = []
    var typeAttr

    [].forEach.call($scripts, function ($script) {
      typeAttr = $script.getAttribute('type')

      // only run script tags without the type attribute
      // or with a javascript mime attribute value
      if (!typeAttr || runScriptTypes.indexOf(typeAttr) !== -1) {
        runList.push(function (callback) {
          insertScript($script, callback)
        })
      }
    })

    // insert the script tags sequentially
    // to preserve execution order
    seq(runList)
  }

  this.toggle = function toggle(el) {
    el.style.display=el.style.display.toString()=='block'?'none':'block';
  }

  this.countWords = function countWords(str) {
    var matches = str.match(/[\w\d\â€™\'-]+/gi);
    return matches ? matches.length : 0;
  }
}).bind(window.dconnect);
dconnect.init.utils();
ß-